Description: Fix CVE-2018-5783 by introducing singleton limit for indirect objects
 The limit is the standard one of 8,388,607 but can be changed by
 a newly introduced inline method (also a getter is provided).
 This also introduced a new define PODOFO_SIZE_FORMAT for formatting
 size_t values portably in printf()-like methods of PdfError etc.
 Please also cf. issue #4 in the issue tracker.
Origin: https://sourceforge.net/p/podofo/code/1949
Bug: https://sourceforge.net/p/podofo/tickets/4/
Bug-Debian: https://bugs.debian.org/916142
Bug-Debian: https://security-tracker.debian.org/tracker/CVE-2018-5783
Last-Update: 2019-02-11

--- a/src/base/PdfCompilerCompat.h
+++ b/src/base/PdfCompilerCompat.h
@@ -184,12 +184,15 @@
 #if defined(_MSC_VER)
 #  define PDF_FORMAT_INT64 "I64d"
 #  define PDF_FORMAT_UINT64 "I64u"
+#  define PDF_SIZE_FORMAT "Iu"
 #elif defined(SZ_INT64) && defined(SZ_LONG) && SZ_INT64 == SZ_LONG
 #  define PDF_FORMAT_INT64 "ld"
 #  define PDF_FORMAT_UINT64 "lu"
+#  define PDF_SIZE_FORMAT "zu"
 #else
 #  define PDF_FORMAT_INT64 "lld"
 #  define PDF_FORMAT_UINT64 "llu"
+#  define PDF_SIZE_FORMAT "zu"
 #endif
 
 
--- a/src/base/PdfVecObjects.cpp
+++ b/src/base/PdfVecObjects.cpp
@@ -100,6 +100,10 @@
     const PdfReference m_ref;
 };
 
+// This is static, IMHO (mabri) different values per-instance could cause confusion.
+// It has to be defined here because of the one-definition rule.
+size_t PdfVecObjects::m_nMaxReserveSize = static_cast<size_t>(8388607); // cf. Table C.1 in section C.2 of PDF32000_2008.pdf
+
 PdfVecObjects::PdfVecObjects()
     : m_bAutoDelete( false ), m_bCanReuseObjectNumbers( true ), m_nObjectCount( 1 ), m_bSorted( true ), m_pDocument( NULL ), m_pStreamFactory( NULL )
 {
--- a/src/base/PdfVecObjects.h
+++ b/src/base/PdfVecObjects.h
@@ -316,6 +316,25 @@
      */
     void Sort();
 
+    /**
+     * Set the maximum number of elements Reserve() will work for (to fix
+     * CVE-2018-5783) which is called with a value from the PDF in the parser.
+     * The default is from Table C.1 in section C.2 of PDF32000_2008.pdf
+     * (PDF 1.7 standard free version).
+     * This sets a static variable, so don't use from multiple threads
+     * (without proper locking).
+     * \param size Number of elements to allow to be reserved
+     */
+    void SetMaxReserveSize(size_t size);
+
+    /**
+     * Gets the maximum number of elements Reserve() will work for (to fix
+     * CVE-2018-5783) which is called with a value from the PDF in the parser.
+     * The default is from Table C.1 in section C.2 of PDF32000_2008.pdf
+     * (PDF 1.7 standard free version): 8388607.
+     */
+    size_t GetMaxReserveSize() const;
+
     /** 
      * Causes the internal vector to reserve space for size elements.
      * \param size reserve space for that much elements in the internal vector
@@ -480,6 +499,7 @@
     StreamFactory*      m_pStreamFactory;
 
 	std::string			m_sSubsetPrefix;		 ///< Prefix for BaseFont and FontName of subsetted font
+    static size_t       m_nMaxReserveSize;
 };
 
 
@@ -494,9 +514,34 @@
 // -----------------------------------------------------
 // 
 // -----------------------------------------------------
+inline void PdfVecObjects::SetMaxReserveSize(size_t size)
+{
+    m_nMaxReserveSize = size;
+}
+
+// -----------------------------------------------------
+// 
+// -----------------------------------------------------
+inline size_t PdfVecObjects::GetMaxReserveSize() const
+{
+    return m_nMaxReserveSize;
+}
+
+// -----------------------------------------------------
+// 
+// -----------------------------------------------------
 inline void PdfVecObjects::Reserve( size_t size )
 {
-    m_vector.reserve( size );
+    if( size <= m_nMaxReserveSize ) // Fix CVE-2018-5783
+    {
+        m_vector.reserve( size );
+    } 
+    else
+    {
+        PdfError::DebugMessage( "Call to PdfVecObjects::Reserve with %"
+                           PDF_SIZE_FORMAT" is over allowed limit of %"
+                           PDF_SIZE_FORMAT".\n", size, m_nMaxReserveSize );
+    }
 }
 
 // -----------------------------------------------------
